Enter password: *******
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 28
Server version: 8.0.32 MySQL Community Server - GPL

Copyright (c) 2000, 2023, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> use test;
Database changed
mysql> /*
   /*>
   /*> Triggers
   /*> Tiggers are procedures which are automatically called
   /*> Used for monitoring DML activities on tables by all users.
   /*>
   /*> Triggers can be executed either before or after the dml statement,
   /*> There are 2 types of triggers
   /*> 1. Row level trigger
   /*> 2. Statement level trigger -this trigger does not work in mysql
   /*>
   /*> In mysql we can use row level trigger on all DML operation
   /*> Timings
   /*> 1. Before---- before trigger gets executed before the actual statement
   /*> 2. After----- after trigger gets executed after execution of the actual statement
   /*>
   /*> 3. Insteadof ----these triggers are used only on views, but mysql doe not support it
   /*>
   /*> Before creation of trigger we need to create a table to store the required information needed for
   /*> monitoring the table
   /*>
   /*> Create table empsecurity(
   /*> Empno int,
   /*> Ename varchar(20),
   /*> Action varchar(20),
   /*> Oldsal double(9,2),
   /*> Newsal double(9,2),
   /*> Uname varchar(20),
   /*> Act_date date);
   /*>
   /*> Syntax:
   /*>
   /*> Create trigger emp_update before update on emp
   /*> For each row
   /*> Begin
   /*> Insert into empsecurity values(OLD.empno,OLD.ename,’update’,OLD.sal,NEW.sal,user(),curdate())
   /*> End//
   /*>
   /*>
   /*> Triggers are block of code which gets executed automatically.
   /*>
   /*> Trigger can be written on all DML operation in mysql
   /*> In mysql only row level triggers are allowed. Statement level triggers are not allowed in mysql.
   /*>
   /*> If we want to write the trigger, then the
   /*> first step is to decide which monitoring table you want to create, and what fields will be stored in the
   /*> table.
   /*>
   /*> Step2 - what will be the trigger timing.
   /*> Tigger timing can either before or after
   /*> The timing can be insteadof --→ these triggers are not supported by mysql. But are supported by
   /*> oracle, these triggers are only used with views.
   /*>
   /*> Step3 ---- on which action the trigger can be executed.
   /*> Action can be ----→insert, update or delete
   /*>
   /*> Step 4------ decide which table the trigger should monitor
   /*>
   /*> Step 5-----decide trigger level
   /*>
   /*> The trigger level can be row level or statement level
   /*>
   /*> Statement level----→ for each DML statement only one entry will be there
   /*>
   /*> Example: if a delete statement, deletes 10 rows , then we need only one entry in the table, then
   /*> write statement level trigger
   /*> These triggers are not supported by mysql , but are supported by oracle.
   /*>
   /*> Row level trigger--→ for each DML statement one entry will be there, for each row getting affected
   /*> by the dml statement.
   /*> Example: if a delete statement, deletes 10 rows , then we need 10 entries in the table, then write
   /*> row level trigger
   /*>
   /*> Syntax :
   /*> Create trigger <name> {before|after} {action} on <table name>
   /*> For each row
   /*> Begin
   /*> statements
   /*> End//
   /*>
   /*> Where to use triggers:
   /*>
   /*> 1. For monitoring changes happening in the table by all users
   /*> 2. To manage data in complex view
   /*> 3. To maintain integrity of denormalized data
   /*> In trigger there are 2 special variables NEW and OLD
   /*>
   /*> OLD NEW
   /*>
   /*> insert null Will have row that will be
   /*> created after insertion is
   /*> done
   /*> delete Will have row that exists in the table.
   /*>
   /*> Null
   /*> Update Will have row that exists in the table
   /*>
   /*> Will have row that will be created after changes are applied
   /*>
   /*> To access data from OLD and NEW variables
   /*>
   /*> Example OLD.empno, OLD.ename, NEW.sal
   /*>
   /*> In mysql to get the name of current user the function is user()
   /*>
   /*> Create table empsecurity(
   /*> Empno int,
   /*> Ename varchar(20),
   /*> Action varchar(20),
   /*> Oldsal double(9,2),
   /*> Newsal double(9,2),
   /*> Uname varchar(20),
   /*> Act_date date);
   /*>
   /*>
   /*>
   /*> Create table discounts(
   /*> Pid int,
   /*> Disc_percent int);
   /*>
   /*> Create table product_dis(
   /*> Pid int,
   /*> Pname varchar(20),
   /*> Price double(9,2),
   /*> Discounted_amt double(9,2));
   /*>
   /*> ---------------------------------------------------------------------------------------------------
   /*> */
mysql>
mysql> drop trigger trg;
Query OK, 0 rows affected (0.03 sec)

mysql> #1. If any user insert data in emp table then insert a record in empsecurity table.
mysql>
mysql> delimiter //
mysql> create trigger trg after insert on emp
    -> for each row
    -> begin
    -> insert into empsecurity values(new.empno,new.ename,'INSERT',null,new.sal,user(),curdate());
    -> end//
Query OK, 0 rows affected (0.04 sec)

mysql> delimiter ;
mysql>
mysql> select * from emp;
+-------+---------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME   | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+---------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH   | CLERK     | 7902 | 1980-12-17 |  566.25 |    NULL |     20 |
|  7499 | ALLEN   | SALESMAN  | 7698 | 1981-02-20 |  335.54 |  300.00 |     30 |
|  7521 | WARD    | SALESMAN  | 7698 | 1981-02-22 |  262.14 |  500.00 |     30 |
|  7566 | JONES   | MANAGER   | 7839 | 1981-04-02 |  830.42 |    NULL |     20 |
|  7654 | MARTIN  | SALESMAN  | 7698 | 1981-09-28 |  262.14 | 1400.00 |     30 |
|  7698 | BLAKE   | MANAGER   | 7839 | 1981-05-01 |  795.53 |    NULL |     30 |
|  7782 | CLARK   | MANAGER   | 7839 | 1981-06-09 |  683.87 |    NULL |     10 |
|  7788 | SCOTT   | ANALYST   | 7566 | 1982-12-09 |  905.97 |    NULL |     20 |
|  7839 | KING    | PRESIDENT | NULL | 1981-11-17 | 1048.58 |    NULL |     10 |
|  7844 | TURNER  | SALESMAN  | 7698 | 1981-09-08 |  314.58 |    0.00 |     30 |
|  7876 | ADAMS   | CLERK     | 7788 | 1983-01-12 |  778.58 |    NULL |     20 |
|  7900 | JAMES   | CLERK     | 7698 | 1981-12-03 |  672.40 |    NULL |     30 |
|  7902 | FORD    | ANALYST   | 7566 | 1981-12-03 |  905.97 |    NULL |     20 |
|  7001 | JOHNSON | EXECUTIVE | 7566 | 1999-09-09 |  629.14 |  200.00 |     40 |
|  7222 | NULL    | NULL      | NULL | NULL       |    NULL |    NULL |   NULL |
+-------+---------+-----------+------+------------+---------+---------+--------+
15 rows in set (0.00 sec)

mysql> insert into emp values(7667,'BELL','CRM',7566,'2000-02-02',980,240,10);
Query OK, 1 row affected (0.03 sec)

mysql> select * from emp;
+-------+---------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME   | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+---------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH   | CLERK     | 7902 | 1980-12-17 |  566.25 |    NULL |     20 |
|  7499 | ALLEN   | SALESMAN  | 7698 | 1981-02-20 |  335.54 |  300.00 |     30 |
|  7521 | WARD    | SALESMAN  | 7698 | 1981-02-22 |  262.14 |  500.00 |     30 |
|  7566 | JONES   | MANAGER   | 7839 | 1981-04-02 |  830.42 |    NULL |     20 |
|  7654 | MARTIN  | SALESMAN  | 7698 | 1981-09-28 |  262.14 | 1400.00 |     30 |
|  7698 | BLAKE   | MANAGER   | 7839 | 1981-05-01 |  795.53 |    NULL |     30 |
|  7782 | CLARK   | MANAGER   | 7839 | 1981-06-09 |  683.87 |    NULL |     10 |
|  7788 | SCOTT   | ANALYST   | 7566 | 1982-12-09 |  905.97 |    NULL |     20 |
|  7839 | KING    | PRESIDENT | NULL | 1981-11-17 | 1048.58 |    NULL |     10 |
|  7844 | TURNER  | SALESMAN  | 7698 | 1981-09-08 |  314.58 |    0.00 |     30 |
|  7876 | ADAMS   | CLERK     | 7788 | 1983-01-12 |  778.58 |    NULL |     20 |
|  7900 | JAMES   | CLERK     | 7698 | 1981-12-03 |  672.40 |    NULL |     30 |
|  7902 | FORD    | ANALYST   | 7566 | 1981-12-03 |  905.97 |    NULL |     20 |
|  7001 | JOHNSON | EXECUTIVE | 7566 | 1999-09-09 |  629.14 |  200.00 |     40 |
|  7222 | NULL    | NULL      | NULL | NULL       |    NULL |    NULL |   NULL |
|  7667 | BELL    | CRM       | 7566 | 2000-02-02 |  980.00 |  240.00 |     10 |
+-------+---------+-----------+------+------------+---------+---------+--------+
16 rows in set (0.00 sec)

mysql> select * from empsecurity;
+-------+-------+--------+--------+--------+----------------+------------+
| Empno | Ename | Action | Oldsal | Newsal | Uname          | Act_date   |
+-------+-------+--------+--------+--------+----------------+------------+
|  7222 | NULL  | INSERT |   NULL |   NULL | root@localhost | 2023-05-20 |
|  7667 | BELL  | INSERT |   NULL | 980.00 | root@localhost | 2023-05-20 |
+-------+-------+--------+--------+--------+----------------+------------+
2 rows in set (0.00 sec)

mysql> #2. If any user delete data in emp table then insert a record in empsecurity table.
mysql>
mysql> delimiter //
mysql> create trigger trg2 after delete on emp
    -> for each row
    -> begin
    -> insert into emp values(old.empno,old.ename,'DELETE',old.sal,null,user(),curdate());
    -> end//
Query OK, 0 rows affected (0.03 sec)

mysql> delimiter ;
mysql>
mysql> select * from emp;
+-------+---------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME   | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+---------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH   | CLERK     | 7902 | 1980-12-17 |  566.25 |    NULL |     20 |
|  7499 | ALLEN   | SALESMAN  | 7698 | 1981-02-20 |  335.54 |  300.00 |     30 |
|  7521 | WARD    | SALESMAN  | 7698 | 1981-02-22 |  262.14 |  500.00 |     30 |
|  7566 | JONES   | MANAGER   | 7839 | 1981-04-02 |  830.42 |    NULL |     20 |
|  7654 | MARTIN  | SALESMAN  | 7698 | 1981-09-28 |  262.14 | 1400.00 |     30 |
|  7698 | BLAKE   | MANAGER   | 7839 | 1981-05-01 |  795.53 |    NULL |     30 |
|  7782 | CLARK   | MANAGER   | 7839 | 1981-06-09 |  683.87 |    NULL |     10 |
|  7788 | SCOTT   | ANALYST   | 7566 | 1982-12-09 |  905.97 |    NULL |     20 |
|  7839 | KING    | PRESIDENT | NULL | 1981-11-17 | 1048.58 |    NULL |     10 |
|  7844 | TURNER  | SALESMAN  | 7698 | 1981-09-08 |  314.58 |    0.00 |     30 |
|  7876 | ADAMS   | CLERK     | 7788 | 1983-01-12 |  778.58 |    NULL |     20 |
|  7900 | JAMES   | CLERK     | 7698 | 1981-12-03 |  672.40 |    NULL |     30 |
|  7902 | FORD    | ANALYST   | 7566 | 1981-12-03 |  905.97 |    NULL |     20 |
|  7001 | JOHNSON | EXECUTIVE | 7566 | 1999-09-09 |  629.14 |  200.00 |     40 |
|  7222 | NULL    | NULL      | NULL | NULL       |    NULL |    NULL |   NULL |
|  7667 | BELL    | CRM       | 7566 | 2000-02-02 |  980.00 |  240.00 |     10 |
+-------+---------+-----------+------+------------+---------+---------+--------+
16 rows in set (0.00 sec)

mysql>
mysql>
mysql> /*
   /*>
   /*> # Write a trigger to update disounted _amt in product_dis table , as soon as we change Disc_percent
   /*> # in discounts table
   /*>
   /*>
   /*>
   /*> discounts
   /*>
   /*> Pid Disc_percent
   /*> 1 3
   /*> 2 20
   /*>
   /*> Create table discounts(
   /*> Pid int,
   /*> Disc_percent int);
   /*>
   /*> insert into discounts values(1,3),(2,20);
   /*>
   /*> product_dis
   /*> pidpnamepriceDiscounted_amt
   /*> 1 chair 2000 1940
   /*>
   /*> Create table product_dis(
   /*> Pid int,
   /*> Pname varchar(20),
   /*> Price double(9,2),
   /*> Discounted_amt double(9,2));
   /*>
   /*> insert into product_dis(1,'chair',2000,1940);
   /*>
   /*> */
mysql>
mysql> delimiter //
mysql> Create trigger update_discount after update on discounts
    -> For each row
    -> Begin
    -> Update product_dis
    -> Set Discounted_amt=price-price*(NEW. Disc_percent /100) ,pid=NEW.pid
    -> Where pid=OLD.pid;
    -> End //
Query OK, 0 rows affected (0.05 sec)

mysql> delimiter ;
mysql>
